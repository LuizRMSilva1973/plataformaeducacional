generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  DIRECTOR
  TEACHER
  STUDENT
}

enum MembershipStatus {
  INVITED
  ACTIVE
  SUSPENDED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}

enum ContentType {
  TEXT
  HTML
  VIDEO
  FILE
}

// Billing/commerce enums
enum BillingInterval {
  ONE_TIME
  MONTHLY
  YEARLY
}

enum ProductType {
  SCHOOL_MEMBERSHIP
  SUBJECT_COURSE
}

enum OrderStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  CANCELED
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  INCOMPLETE
}

enum LedgerType {
  PLATFORM_FEE
  SCHOOL_EARNING
  REFUND
  ADJUSTMENT
}

enum LedgerDirection {
  DEBIT
  CREDIT
}

enum PaymentProviderKind {
  MANUAL
  STRIPE
  MERCADO_PAGO
}

model User {
  id        String        @id @default(cuid())
  email     String        @unique
  name      String
  passwordHash String
  isAdmin   Boolean       @default(false)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  memberships Membership[]
  submissions Submission[]
  enrollments Enrollment[]
  grades     Grade[]
  attendances Attendance[]
  teachingAssignments TeachingAssignment[]
  files      StoredFile[] @relation("UserFiles")
  auditLogs  AuditLog[]   @relation("UserAuditLogs")
  messagesSent Message[]  @relation("messagesSent")
  messagesRecv Message[]  @relation("messagesRecv")
  lessonsCreated Lesson[] @relation("LessonCreatedBy")
}

model School {
  id        String        @id @default(cuid())
  name      String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  memberships Membership[]
  classes   Class[]
  subjects  Subject[]
  teachingAssignments TeachingAssignment[]
  enrollments Enrollment[]
  assignments Assignment[]
  grades     Grade[]
  attendances Attendance[]
  announcements Announcement[]
  messages   Message[]
  files      StoredFile[]
  auditLogs  AuditLog[]
  lessons    Lesson[]

  // Billing relations
  prices     Price[]
  orders     Order[]
  subscriptions Subscription[]
  ledger     LedgerEntry[]

  // Payment provider accounts
  stripeAccountId String?
  mpUserId        String?
}

model Membership {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  school    School    @relation(fields: [schoolId], references: [id])
  schoolId  String
  role      Role
  status    MembershipStatus @default(INVITED)
  createdAt DateTime  @default(now())
  @@unique([userId, schoolId, role])
  @@index([schoolId, role])
  @@index([schoolId])
}

model Class {
  id        String    @id @default(cuid())
  school    School    @relation(fields: [schoolId], references: [id])
  schoolId  String
  name      String
  year      Int
  enrollments Enrollment[]
  assignments Assignment[]
  teachingAssignments TeachingAssignment[]
  grades     Grade[]
  attendances Attendance[]
  announcements Announcement[]
  messages   Message[]
  lessons    Lesson[]
  @@index([schoolId])
}

model Subject {
  id        String   @id @default(cuid())
  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  String
  name      String
  teachingAssignments TeachingAssignment[]
  assignments Assignment[]
  grades     Grade[]
  lessons    Lesson[]
  @@index([schoolId])
}

model TeachingAssignment {
  id        String   @id @default(cuid())
  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  String
  teacher   User     @relation(fields: [teacherUserId], references: [id])
  teacherUserId String
  class     Class    @relation(fields: [classId], references: [id])
  classId   String
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId String
  @@unique([teacherUserId, classId, subjectId])
  @@index([schoolId])
}

model Enrollment {
  id        String   @id @default(cuid())
  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  String
  student   User     @relation(fields: [studentUserId], references: [id])
  studentUserId String
  class     Class    @relation(fields: [classId], references: [id])
  classId   String
  @@unique([studentUserId, classId])
  @@index([schoolId])
}

model Assignment {
  id        String   @id @default(cuid())
  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  String
  class     Class    @relation(fields: [classId], references: [id])
  classId   String
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId String
  title     String
  dueAt     DateTime?
  submissions Submission[]
  grades     Grade[]
  @@index([schoolId])
}

model Submission {
  id        String   @id @default(cuid())
  assignment Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId String
  student   User     @relation(fields: [studentUserId], references: [id])
  studentUserId String
  submittedAt DateTime @default(now())
  grade     Float?
  @@unique([assignmentId, studentUserId])
}

model Grade {
  id        String   @id @default(cuid())
  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  String
  student   User     @relation(fields: [studentUserId], references: [id])
  studentUserId String
  class     Class    @relation(fields: [classId], references: [id])
  classId   String
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId String
  assignment Assignment? @relation(fields: [assignmentId], references: [id])
  assignmentId String?
  value     Float
  comment   String?
  gradedAt  DateTime @default(now())
  @@index([schoolId])
}

model Attendance {
  id        String   @id @default(cuid())
  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  String
  class     Class    @relation(fields: [classId], references: [id])
  classId   String
  student   User     @relation(fields: [studentUserId], references: [id])
  studentUserId String
  date      DateTime
  status    AttendanceStatus
  @@unique([classId, studentUserId, date])
  @@index([schoolId])
}

model Announcement {
  id        String   @id @default(cuid())
  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  String
  class     Class?   @relation(fields: [classId], references: [id])
  classId   String?
  title     String
  content   String
  createdAt DateTime @default(now())
  @@index([schoolId])
}

model Message {
  id        String   @id @default(cuid())
  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  String
  fromUser  User     @relation("messagesSent", fields: [fromUserId], references: [id])
  fromUserId String
  toUser    User?    @relation("messagesRecv", fields: [toUserId], references: [id])
  toUserId  String?
  class     Class?   @relation(fields: [classId], references: [id])
  classId   String?
  content   String
  file      StoredFile? @relation(fields: [fileId], references: [id])
  fileId    String?
  createdAt DateTime @default(now())
  @@index([schoolId])
}

model StoredFile {
  id        String   @id @default(cuid())
  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  String
  owner     User?    @relation("UserFiles", fields: [ownerUserId], references: [id])
  ownerUserId String?
  path      String
  mimeType  String
  createdAt DateTime @default(now())
  lessons   Lesson[]
  @@index([schoolId])
}

model AuditLog {
  id        String   @id @default(cuid())
  school    School?  @relation(fields: [schoolId], references: [id])
  schoolId  String?
  actor     User?    @relation("UserAuditLogs", fields: [actorUserId], references: [id])
  actorUserId String?
  action    String
  entity    String
  entityId  String
  meta      Json?
  createdAt DateTime @default(now())
  @@index([schoolId])
}

model Lesson {
  id        String   @id @default(cuid())
  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  String
  class     Class?   @relation(fields: [classId], references: [id])
  classId   String?
  subject   Subject? @relation(fields: [subjectId], references: [id])
  subjectId String?
  title     String
  contentType ContentType
  body      String?
  file      StoredFile? @relation(fields: [fileId], references: [id])
  fileId    String?
  createdBy User     @relation("LessonCreatedBy", fields: [createdByUserId], references: [id])
  createdByUserId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  publishedAt DateTime?
  @@index([schoolId])
}

// Rubrics and feedback
model Rubric {
  id        String   @id @default(cuid())
  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  String
  name      String
  criteria  RubricCriterion[]
  assignments AssignmentRubric[]
  createdAt DateTime @default(now())
}

model RubricCriterion {
  id        String   @id @default(cuid())
  rubric    Rubric   @relation(fields: [rubricId], references: [id])
  rubricId  String
  label     String
  maxScore  Int
  weight    Float?   @default(1)
}

model AssignmentRubric {
  id          String   @id @default(cuid())
  assignment  Assignment @relation(fields: [assignmentId], references: [id])
  assignmentId String @unique
  rubric      Rubric   @relation(fields: [rubricId], references: [id])
  rubricId    String
}

model SubmissionFeedback {
  id        String   @id @default(cuid())
  submission Submission @relation(fields: [submissionId], references: [id])
  submissionId String @unique
  teacher     User     @relation(fields: [teacherUserId], references: [id])
  teacherUserId String
  comment   String?
  createdAt DateTime @default(now())
  items     SubmissionFeedbackItem[]
}

model SubmissionFeedbackItem {
  id        String   @id @default(cuid())
  feedback  SubmissionFeedback @relation(fields: [feedbackId], references: [id])
  feedbackId String
  criterion  RubricCriterion @relation(fields: [criterionId], references: [id])
  criterionId String
  score     Int
  comment   String?
}

// Billing models

model AppConfig {
  id        String   @id @default("config")
  platformFeePercent Float @default(10.0)
  defaultPaymentProvider PaymentProviderKind @default(MANUAL)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Price {
  id        String   @id @default(cuid())
  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  String
  productType ProductType
  productRefId String
  amountCents Int
  currency  String   @default("BRL")
  interval  BillingInterval @default(MONTHLY)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([schoolId])
  @@index([schoolId, productType, productRefId])
}

model Order {
  id        String   @id @default(cuid())
  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  String
  buyer     User     @relation(fields: [buyerUserId], references: [id])
  buyerUserId String
  status    OrderStatus @default(PENDING)
  totalAmountCents Int  @default(0)
  currency  String   @default("BRL")
  items     OrderItem[]
  payment   Payment?
  createdAt DateTime @default(now())
  paidAt    DateTime?
  @@index([schoolId])
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  productType ProductType
  productRefId String
  priceAmountCents Int
  quantity  Int      @default(1)
  interval  BillingInterval @default(ONE_TIME)
}

model Payment {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @unique
  provider  String   @default("manual")
  providerPaymentId String?
  status    PaymentStatus @default(PENDING)
  raw       Json?
  createdAt DateTime @default(now())
}

model Subscription {
  id        String   @id @default(cuid())
  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  productType ProductType
  productRefId String
  status    SubscriptionStatus @default(INCOMPLETE)
  currentPeriodEnd DateTime?
  cancelAtPeriodEnd Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([schoolId])
  @@unique([schoolId, userId, productType, productRefId])
}

model LedgerEntry {
  id        String   @id @default(cuid())
  school    School   @relation(fields: [schoolId], references: [id])
  schoolId  String
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?
  subscription Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?
  entryType LedgerType
  direction LedgerDirection
  amountCents Int
  meta      Json?
  createdAt DateTime @default(now())
  @@index([schoolId])
}
